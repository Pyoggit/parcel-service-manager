-- 회원 테이블 생성
CREATE TABLE CUSTOMER (
    CODE CHAR(5),                   -- 회원 코드 (고유 식별자)
    NAME VARCHAR2(50) NOT NULL,     -- 회원 이름
    ID VARCHAR2(15) NOT NULL,       -- 아이디 (고유, 중복 불가)
    PWD VARCHAR2(15) NOT NULL,      -- 비밀번호
    BIRTH VARCHAR2(20) NOT NULL,    -- 생년월일
    PHONE VARCHAR2(15) NOT NULL,    -- 전화번호
    ADDRESS VARCHAR2(100)NOT NULL,  -- 주소
    EMAIL VARCHAR2(40) NOT NULL,    -- 이메일
    CDATE DATE DEFAULT SYSDATE      -- 가입일자
);

ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_CODE_PK PRIMARY KEY(CODE);
ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_ID_UK UNIQUE(ID);

-- 회원코드 시퀀스 생성
CREATE SEQUENCE CUSTOMER_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 회원코드 트리거 생성
CREATE OR REPLACE TRIGGER CUSTOMER_TRG
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
DECLARE
    v_max_code NUMBER;
BEGIN
    -- 회원 코드의 최댓값을 조회하여, 시퀀스에서 누락된 값을 방지
    SELECT NVL(MAX(TO_NUMBER(CODE)), 0) + 1 INTO v_max_code FROM CUSTOMER;
    :NEW.CODE := LPAD(v_max_code, 5, '0');
END;
/

-- 회원정보 입력값 테스트
INSERT INTO CUSTOMER (CODE, NAME, ID, PWD, BIRTH, PHONE, ADDRESS, EMAIL, CDATE) 
VALUES (CUSTOMER_SEQ.NEXTVAL, '임꺽정', 'lim987', 'password4', '19880404', '010-3333-4444', '경기도 안성시', 'lim987@example.com', SYSDATE);
COMMIT;

-- 상품 테이블 생성
CREATE TABLE PRODUCT (
    CODE CHAR(5) PRIMARY KEY,          -- 상품 코드 (고유 식별자)
    NAME VARCHAR2(50) NOT NULL UNIQUE, -- 상품명 (고유, 중복 불가)
    PRICE NUMBER(10, 2) NOT NULL,      -- 가격
    STOCK NUMBER(5) NOT NULL           -- 재고 수량
);

-- 상품코드 시퀀스 생성
CREATE SEQUENCE PRODUCT_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 상품코드 트리거 생성
CREATE OR REPLACE TRIGGER PRODUCT_TRG
BEFORE INSERT ON PRODUCT
FOR EACH ROW
DECLARE
    v_max_code NUMBER;
BEGIN
    SELECT NVL(MAX(TO_NUMBER(CODE)), 0) + 1 INTO v_max_code FROM PRODUCT;
    :NEW.CODE := LPAD(v_max_code, 5, '0');
END;
/

-- 배송업체 테이블 생성
DROP TABLE DELIVERY;
CREATE TABLE DELIVERY (
    NAME VARCHAR2(50) PRIMARY KEY,  -- 배송업체명 (고유 식별자)
    COST NUMBER(10, 2) NOT NULL    -- 배송비
);

-- 주문 테이블 생성
CREATE TABLE ORDERS (
    CODE CHAR(5) PRIMARY KEY,            -- 주문 코드 (고유 식별자)
    CID VARCHAR2(15) NOT NULL,           -- 회원 아이디 FK 
    PNAME VARCHAR2(50) NOT NULL,         -- 상품명 FK
    DNAME VARCHAR2(50) NOT NULL,         -- 배송업체명 FK
    ODATE DATE DEFAULT SYSDATE,          -- 주문일자
    AMOUNT NUMBER(5) NOT NULL,           -- 주문 수량
    TOTAL NUMBER(15, 2)                  -- 총 주문 금액
);

-- 외래 키 제약조건 추가
ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_CUSTOMER_ID_FK 
    FOREIGN KEY (CID) REFERENCES CUSTOMER(ID);
ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_PRODUCT_NAME_FK 
    FOREIGN KEY (PNAME) REFERENCES PRODUCT(NAME);
ALTER TABLE ORDERS ADD CONSTRAINT ORDERS_DELIVERY_NAME_FK 
    FOREIGN KEY (DNAME) REFERENCES DELIVERY(NAME);

-- 주문코드 시퀀스 생성
DROP SEQUENCE ORDERS_SEQ;
CREATE SEQUENCE ORDERS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 주문코드 트리거 생성
CREATE OR REPLACE TRIGGER ORDERS_TRG
BEFORE INSERT ON ORDERS
FOR EACH ROW
DECLARE
    v_max_code NUMBER;
BEGIN
    SELECT NVL(MAX(TO_NUMBER(CODE)), 0) + 1 INTO v_max_code FROM ORDERS;
    :NEW.CODE := LPAD(v_max_code, 5, '0');
END;
/

-- 총 주문 금액을 계산하는 함수 생성
CREATE OR REPLACE FUNCTION CALCULATE_TOTAL_PRICE(P_PNAME VARCHAR2, P_AMOUNT NUMBER)
RETURN NUMBER
IS
    V_PRICE NUMBER(10, 2);
    V_TOTAL NUMBER(15, 2);
BEGIN
    -- 상품의 가격을 조회
    SELECT PRICE INTO V_PRICE FROM PRODUCT WHERE NAME = P_PNAME;
    V_TOTAL := V_PRICE * P_AMOUNT;
    RETURN V_TOTAL;
END;
/

-- 주문 정보 입력 프로시저 생성
CREATE OR REPLACE PROCEDURE INSERT_ORDER (
    P_CID VARCHAR2,
    P_PNAME VARCHAR2,
    P_DNAME VARCHAR2,
    P_AMOUNT NUMBER
)
IS
    V_TOTAL NUMBER(15, 2);
BEGIN
    -- 총 주문 금액 계산
    V_TOTAL := CALCULATE_TOTAL_PRICE(P_PNAME, P_AMOUNT);
    
    -- 주문 정보 입력
    INSERT INTO ORDERS (CID, PNAME, DNAME, AMOUNT, TOTAL)
    VALUES (P_CID, P_PNAME, P_DNAME, P_AMOUNT, V_TOTAL);
    
    -- 커밋
    COMMIT;
END;
/

-- 주문 정보 조회 (회원 아이디, 상품명, 배송업체명 기준)
SELECT O.CODE, C.NAME AS CUSTOMER_NAME, O.PNAME, O.DNAME, O.ODATE, O.AMOUNT, O.TOTAL
FROM ORDERS O
JOIN CUSTOMER C ON O.CID = C.ID
JOIN PRODUCT P ON O.PNAME = P.NAME
JOIN DELIVERY D ON O.DNAME = D.NAME
ORDER BY O.ODATE DESC;
